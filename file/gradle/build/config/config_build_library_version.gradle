// =================
// = 版本信息统一处理 =
// =================

// 获取 lib 名 => settings.gradle 例 include ':core_lib_engine'
def libName = project.getName() // core_lib_engine

// =============
// = core、libs =
// =============

// 从 file/gradle/version.gradle 中获取对应的 lib 版本信息
def libVersionCode = versions.get(libName + "_versionCode")
def libVersionName = versions.get(libName + "_versionName")

if (libVersionCode != null && libVersionName != null) {
    android.defaultConfig {
        versionCode libVersionCode
        versionName libVersionName
        // Library Version
        buildConfigField("int", libName + "_VersionCode", "${versionCode}")
        buildConfigField("String", libName + "_Version", "\"${versionName}\"")
    }
}

// ==========
// = module =
// ==========

// 从 file/gradle/modular.gradle 中获取对应的 module 版本信息
if (libName.startsWith("module_")) {
    def modular = modularVersion[libName]
    if (modular != null) {
        def moduleVersionCode = modular.versionCode
        def moduleVersionName = modular.versionName

        if (moduleVersionCode != null && moduleVersionName != null) {
            android.defaultConfig {
                versionCode moduleVersionCode
                versionName moduleVersionName
                // Module Version
                buildConfigField("int", libName + "_VersionCode", "${versionCode}")
                buildConfigField("String", libName + "_Version", "\"${versionName}\"")
            }
        }
    }
}

// =================
// = 资源统一前缀处理 =
// =================

android {

    if (libName.startsWith("core")) {
        // 属于 core module
        resourcePrefix libName.replaceAll("_lib", "") + "_"
    } else if (libName.startsWith("module_")) {
        // 属于各个组件 module
        resourcePrefix libName.replaceAll("module_", "") + "_"
    } else if (libName.startsWith("lib_")) {
//        // 属于各个封装 libs
//        resourcePrefix libName.replaceAll("lib_", "") + "_"
//        resourcePrefix libName
    }
    printf("\n%s - %s", libName, android.resourcePrefix)
}